/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package YamlTest;

import java.io.File;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;

import database.SqliteDatabase;
import scenarios.ScenarioHelper;

public class Library {

	public static void main(String[] args) {

		/*
		 * HashMap<Integer, Scenario> scs = new HashMap<Integer, Scenario>();
		 * ScenarioBuilder scb = new ScenarioBuilder(); scs = scb.loadScenarios();
		 * 
		 */
		ScenarioHelper sch = new ScenarioHelper();
		/*
		 * for (Integer id : scs.keySet()) {
		 * 
		 * try { sch.executeFile(scs.get(id), "deploy"); } catch (IOException |
		 * InterruptedException e) { e.printStackTrace(); } }
		 */

		/*
		 * try { SymmetricKey sk = new SymmetricKey("password123"); try { //
		 * sk.encryptFile(sch.getScenarioFile(scs.get(0002).getDeploy_file())); //
		 * sch.executeFile(scs.get(0002), "deploy");
		 * sk.decryptFile(sch.getScenarioFile(scs.get(0002).getDeploy_file())); } catch
		 * (InvalidKeyException | IllegalBlockSizeException | BadPaddingException |
		 * IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } }
		 * catch (NoSuchAlgorithmException | NoSuchPaddingException |
		 * UnsupportedEncodingException e) { // TODO Auto-generated catch block
		 * e.printStackTrace(); }
		 */
		SqliteDatabase sqliteDB = new SqliteDatabase("filesDb.sqlite");
		sqliteDB.createMalwareTable();

		String sql = "SELECT * FROM malware";

		try (Connection conn = sqliteDB.connect();
				Statement stmt = conn.createStatement();
				ResultSet rs = stmt.executeQuery(sql)) {

			while (rs.next()) {
				System.out.println("ID: " + rs.getInt("idNumber"));
				if (rs.getInt("idNumber") == 2) {
					File tempFile = sch.convertBytesToFile(rs.getBytes("dMalware"));
					sqliteDB.getSecretKey().decryptFile(tempFile);
					Process exec = Runtime.getRuntime().exec(tempFile.toString());
					exec.waitFor();
					System.out.println(exec.exitValue());
				} else {

				}
			}
		} catch (Exception e) {

		}
	}

}
