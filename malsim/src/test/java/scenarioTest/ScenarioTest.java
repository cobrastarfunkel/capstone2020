/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package scenarioTest;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import java.io.File;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.util.HashMap;

import javax.crypto.BadPaddingException;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

import encryption.SymmetricKey;
import scenarios.Scenario;
import scenarios.ScenarioBuilder;
import scenarios.ScenarioHelper;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class ScenarioTest {
	private static HashMap<Integer, Scenario> scs = new HashMap<Integer, Scenario>();
	private ScenarioBuilder scb = new ScenarioBuilder();
	private ScenarioHelper sch = new ScenarioHelper();
	private Integer id = 0002;
	private static SymmetricKey sk;

	@Test
	public void testAscenarioCreation() {
		scs = scb.loadScenarios();
		// Check values
		assertEquals(0002, scs.get(id).getId());
		assertEquals("Unit Test Scenario", scs.get(id).getName());
		assertEquals("unit_test2/scenario2.exe", scs.get(id).getDeploy_file());
		assertEquals("unit_test2/scenario_reset.ps1", scs.get(id).getReset_file());
		assertEquals("c++", scs.get(id).getLanguage());
		assertEquals("artifact", scs.get(id).getType());
	}

	@Test
	public void testBfileExecution() {
		try {
			File scFile = sch.getScenarioFile(scs.get(id).getDeploy_file());
			sch.executeFile(scFile, scs.get(id).getLanguage(), "deploy");
		} catch (IOException | InterruptedException e) {
			e.printStackTrace();
		}
		assertTrue("C:\\cpptest.txt Should be created", new File("C:\\cpptest.txt").exists());

		try {
			File resetFile = sch.getScenarioFile(scs.get(0002).getReset_file());
			sch.executeFile(resetFile, scs.get(id).getLanguage(), "reset");
		} catch (IOException | InterruptedException e) {
			e.printStackTrace();
		}
		assertFalse("C:\\cpptest.txt Should be deleted", new File("C:\\cpptest.txt").exists());
	}

	// If the file is encrypted it will throw an IO exception
	@Test(expected = IOException.class)
	public void testCencryption() throws Exception {
		try {
			sk = new SymmetricKey("password123");
			try {
				File scFile = sch.getScenarioFile(scs.get(id).getDeploy_file());
				sk.encryptFile(scFile);
				sch.executeFile(scFile, scs.get(id).getLanguage(), "deploy");
			} catch (InvalidKeyException | IllegalBlockSizeException | BadPaddingException | IOException
					| InterruptedException e) {
				throw e;

			}
		} catch (NoSuchAlgorithmException | NoSuchPaddingException | UnsupportedEncodingException e1) {
			e1.printStackTrace();
		}
	}

	@Test
	public void testDdecryption() {

		try {
			File scFile = sch.getScenarioFile(scs.get(id).getDeploy_file());
			// Decrypt and execute the exe
			sk.decryptFile(scFile);
			sch.executeFile(scFile, scs.get(id).getLanguage(), "deploy");
		} catch (InvalidKeyException | IllegalBlockSizeException | BadPaddingException | IOException
				| InterruptedException e) {
			e.printStackTrace();
		}

		// Ensure the file was created
		assertTrue("C:\\cpptest.txt Should be created", new File("C:\\cpptest.txt").exists());
		try {
			File resetFile = sch.getScenarioFile(scs.get(0002).getReset_file());
			sch.executeFile(resetFile, scs.get(id).getLanguage(), "reset");
		} catch (IOException | InterruptedException e) {
			e.printStackTrace();
		}
		assertFalse("C:\\cpptest.txt Should be deleted", new File("C:\\cpptest.txt").exists());
	}
}
